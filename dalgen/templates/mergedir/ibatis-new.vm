#set ($baseClass = "org.springframework.orm.ibatis.support.SqlMapClientDaoSupport")#set ($base = "SqlMapClientDaoSupport")#if (${table.isAutoSwitchDataSrc})#set ($base = "AutoSwitchDataSrcSqlMapClientDaoSupport")#end#parse("copyright.vm")package ${table.ibatisPackage};import $baseClass;import javax.crypto.Cipher;import org.codehaus.xfire.util.Base64;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.HashMap;import org.springframework.util.CollectionUtils;import ${table.getUtilsPackage()}.${table.getUtilClassName()};import java.security.GeneralSecurityException;import ${table.qualifiedDAOClassName};// auto generated imports#foreach($importClass in $table.daoImports) import $importClass;#end#set ($daoImportList = $table.daoImports)#foreach($importClass in $table.ibatisImports)#if( ! ($daoImportList.contains($importClass)) )import $importClass;#end#end/** * An ibatis based implementation of dao interface <tt>${table.qualifiedDAOClassName}</tt>. *#parse("description-java.vm") */  @DResource(id = "${table.ibatisPackage}.${table.ibatisClassName}",domain = DistributedResourceDomain.ARCH)public class ${table.ibatisClassName} extends $base implements ${table.DAOClassName} {	private boolean power = false;		public static final String appName = "${plugin.getAppName()}";    public static final String encodeKeyName = "${table.getTableConfig().getEncodekeyname()}";    public static final String abstractKeyName = "${table.getTableConfig().getAbstractkeyname()}";		${table.getUtilClassName()} methodUtils = null;      @DAttribute    public boolean getPower() {        return power;    }    @DAttribute    public void setPower(boolean power) {        this.power = power;    }	@DFunction(type = FunctionType.update)    public void updateResource(String key, Object value) {        if (key.equals("power")) {            this.power = new Boolean(value.toString());        }    }#if(${table.getTableConfig().getDrmConfig()} == true)	/**     * ���Լ�ע��Ϊ�ֲ�ʽ��Դ��     */    public void register() {        DRMClient.getInstance().register(this);    }#end    public void setMethodUtils(${table.getUtilClassName()} methodUtils) {        this.methodUtils = methodUtils;    }#foreach($operation in $table.operations)#parse("operation/op-${operation.templateSuffix}.vm") #parse("operation/opbody-${operation.templateSuffix}.vm")#end}